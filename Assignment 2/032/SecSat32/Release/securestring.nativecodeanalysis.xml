<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.h</FILENAME>
      <LINE>19</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'SecureString::GetValue' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>SecureString::GetValue</FUNCTION>
    <DECORATED>?GetValue@SecureString@@QBEPBDXZ</DECORATED>
    <FUNCLINE>19</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.h</FILENAME>
      <LINE>37</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression 'inString': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION>&gt;&gt;</FUNCTION>
    <DECORATED>??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVSecureString@@@Z</DECORATED>
    <FUNCLINE>33</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.h</FILENAME>
      <LINE>40</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression 'inString': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION>&gt;&gt;</FUNCTION>
    <DECORATED>??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVSecureString@@@Z</DECORATED>
    <FUNCLINE>33</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.h</FILENAME>
      <LINE>40</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>&gt;&gt;</FUNCTION>
    <DECORATED>??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVSecureString@@@Z</DECORATED>
    <FUNCLINE>33</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.h</FILENAME>
      <LINE>50</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression 'inString': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION>&gt;&gt;</FUNCTION>
    <DECORATED>??5@YAAAV?$basic_istream@DU?$char_traits@D@std@@@std@@AAV01@AAVSecureString@@@Z</DECORATED>
    <FUNCLINE>33</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>secureuint32.h</FILENAME>
      <LINE>11</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'SecureUInt32::GetValue' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>SecureUInt32::GetValue</FUNCTION>
    <DECORATED>?GetValue@SecureUInt32@@QBEIXZ</DECORATED>
    <FUNCLINE>11</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>6</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>SecureString::{ctor}</FUNCTION>
    <DECORATED>??0SecureString@@QAE@XZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>6</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>SecureString::{ctor}</FUNCTION>
    <DECORATED>??0SecureString@@QAE@XZ</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>15</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class SecureString', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>SecureString::{dtor}</FUNCTION>
    <DECORATED>??1SecureString@@QAE@XZ</DECORATED>
    <FUNCLINE>15</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>17</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'Clear()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>SecureString::{dtor}</FUNCTION>
    <DECORATED>??1SecureString@@QAE@XZ</DECORATED>
    <FUNCLINE>15</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>31</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>SecureString::+=</FUNCTION>
    <DECORATED>??YSecureString@@QAEAAV0@ABV0@@Z</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>36</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>SecureString::+=</FUNCTION>
    <DECORATED>??YSecureString@@QAEAAV0@ABV0@@Z</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>36</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>SecureString::+=</FUNCTION>
    <DECORATED>??YSecureString@@QAEAAV0@ABV0@@Z</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>42</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>SecureString::+=</FUNCTION>
    <DECORATED>??YSecureString@@QAEAAV0@ABV0@@Z</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>42</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>SecureString::+=</FUNCTION>
    <DECORATED>??YSecureString@@QAEAAV0@ABV0@@Z</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>62</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26496</DEFECTCODE>
    <DESCRIPTION>The variable 'currentStringSize' is assigned only once, mark it as const (con.4).</DESCRIPTION>
    <FUNCTION>SecureString::GetLength</FUNCTION>
    <DECORATED>?GetLength@SecureString@@QBEIXZ</DECORATED>
    <FUNCLINE>59</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>82</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>SecureString::SetValue</FUNCTION>
    <DECORATED>?SetValue@SecureString@@QAEXIQBD@Z</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>72</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'value' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>SecureString::SetValue</FUNCTION>
    <DECORATED>?SetValue@SecureString@@QAEXIQBD@Z</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>86</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>SecureString::SetValue</FUNCTION>
    <DECORATED>?SetValue@SecureString@@QAEXIQBD@Z</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>86</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>SecureString::SetValue</FUNCTION>
    <DECORATED>?SetValue@SecureString@@QAEXIQBD@Z</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>90</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>SecureString::SetValue</FUNCTION>
    <DECORATED>?SetValue@SecureString@@QAEXIQBD@Z</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>98</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>SecureString::AddChar</FUNCTION>
    <DECORATED>?AddChar@SecureString@@AAEXD@Z</DECORATED>
    <FUNCLINE>93</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>103</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>SecureString::AddChar</FUNCTION>
    <DECORATED>?AddChar@SecureString@@AAEXD@Z</DECORATED>
    <FUNCLINE>93</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>103</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>SecureString::AddChar</FUNCTION>
    <DECORATED>?AddChar@SecureString@@AAEXD@Z</DECORATED>
    <FUNCLINE>93</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>106</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>SecureString::AddChar</FUNCTION>
    <DECORATED>?AddChar@SecureString@@AAEXD@Z</DECORATED>
    <FUNCLINE>93</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>107</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>SecureString::AddChar</FUNCTION>
    <DECORATED>?AddChar@SecureString@@AAEXD@Z</DECORATED>
    <FUNCLINE>93</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>110</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'SecureString::Clear' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>SecureString::Clear</FUNCTION>
    <DECORATED>?Clear@SecureString@@QAEXXZ</DECORATED>
    <FUNCLINE>110</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>118</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26401</DEFECTCODE>
    <DESCRIPTION>Do not delete a raw pointer that is not an owner&lt;T&gt; (i.11).</DESCRIPTION>
    <FUNCTION>SecureString::Clear</FUNCTION>
    <DECORATED>?Clear@SecureString@@QAEXXZ</DECORATED>
    <FUNCLINE>110</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>h:\year 2 v2\secure software\assignment 2\032\secsat32</FILEPATH>
      <FILENAME>securestring.cpp</FILENAME>
      <LINE>118</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>SecureString::Clear</FUNCTION>
    <DECORATED>?Clear@SecureString@@QAEXXZ</DECORATED>
    <FUNCLINE>110</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>